'''
Задание1. Проанализировать скорость и сложность одного любого алгоритма, разработанных в рамках домашнего задания первых трех уроков.
Примечание: попробуйте написать несколько реализаций алгоритма и сравнить их.
'''

'''
В рамках этого задания была взята следующая задача:
Напишите программу, доказывающую или проверяющую, что для множества натуральных чисел выполняется равенство: 
1+2+...+n = n(n+1)/2, где n - любое натуральное число.

Была измерена скорость через cProfile. Решение было сделано через рекурсию и перебор в цикле.
В результате при значении n = 900 была видна в скорости обработки данных.
Реализация через рекурсию показала 0.002 в среднем
Реализация через перебор показала 0, только при n = 9000 удалось замерить время, оно было в среднем 0.001.
В данном алгоритме перебор показал очевидное преимущество. 
Через цикл происходит вызов намного меньшего количества функцмй
'''

# Реализация через рекурсию:
import cProfile
def sum_n(n):
    if n == 1:
        return 1
    else:
        return n + sum_n(n-1)
def main():
    n = 900
    a = sum_n(n)

'''
Результат работы алгоритма при n = 900:

         904 function calls (5 primitive calls) in 0.002 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.002    0.002 <string>:1(<module>)
    900/1    0.002    0.000    0.002    0.002 main1.py:2(sum_n)
        1    0.000    0.000    0.002    0.002 main1.py:7(main)
        1    0.000    0.000    0.002    0.002 {built-in method builtins.exec}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
'''

cProfile.run('main()')

# Реализация через перебор в цикле:
import cProfile
def sum_n(n):
    sum_n = 0
    for i in range(n + 1):
        sum_n += i
    return sum_n

def main():
    n = 9000
    a = sum_n(n)

cProfile.run('main()')

'''
Результат работы алгоритма при n = 9000:
         5 function calls in 0.001 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.001    0.001 <string>:1(<module>)
        1    0.001    0.001    0.001    0.001 main2.py:2(sum_n)
        1    0.000    0.000    0.001    0.001 main2.py:8(main)
        1    0.000    0.000    0.001    0.001 {built-in method builtins.exec}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
'''

